pipeline {
    agent {
        docker {
            image 'akashhc55/cicd-project:v1'
            args '--user root -v /var/run/docker.sock:/var/run/docker.sock' // Mount Docker socket for host access
        }
    }

    environment {
        DOCKER_IMAGE = "akashhc55/cicd-project:${BUILD_NUMBER}"
        YAML_FILE = "test-poc-2/deployment.yaml"
    }

    stages {
        stage('Checkout') {
            steps {
                echo '✅ Checkout stage started'
                // Uncomment this when you want to checkout project source
                // git branch: 'main', url: 'https://github.com/Akash-HC/Jenkins-reference.git'
            }
        }

        stage('Build and Test') {
            steps {
                echo '✅ Building and testing the project'
                sh 'ls -ltr'
                sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn clean package'
            }
        }

        stage('Build and Push Docker Image') {
            environment {
                REGISTRY_CREDENTIALS = credentials('docker-hub-creds')
            }
            steps {
                echo '✅ Building Docker image and pushing to Docker Hub'
                script {
                    sh '''
                        cd java-maven-sonar-argocd-helm-k8s/spring-boot-app
                        docker build -t ${DOCKER_IMAGE} .
                    '''
                    def dockerImage = docker.image("${DOCKER_IMAGE}")
                    docker.withRegistry('https://index.docker.io/v1/', "docker-hub-creds") {
                        dockerImage.push()
                    }
                }
            }
        }

        stage('Update Kubernetes Manifests') {
            steps {
                echo '✅ Updating deployment.yaml in Git repo'
                withCredentials([usernamePassword(
                    credentialsId: 'git-creds-id',
                    usernameVariable: 'GIT_USERNAME',
                    passwordVariable: 'GIT_PASSWORD'
                )]) {
                    sh '''
                        rm -rf argo-repo
                        git clone https://${GIT_USERNAME}:${GIT_PASSWORD}@github.com/Akash-HC/ArgoCD-Test.git argo-repo
                    '''
                }

                dir('argo-repo') {
                    script {
                        def content = readFile(file: "${env.YAML_FILE}")
                        def updated = content.replaceAll("image: .*", "image: ${env.DOCKER_IMAGE}")
                        writeFile(file: "${env.YAML_FILE}", text: updated)
                    }

                    sh '''
                        git config user.email "akashchalkodu@gmail.com"
                        git config user.name "Akash-HC"
                        git add ${YAML_FILE}
                        git diff --cached --quiet || git commit -m "Update image to ${DOCKER_IMAGE}"
                        git push origin main
                    '''
                }
            }
        }
    }

    post {
        failure {
            echo "❌ Pipeline failed. Please check the console output."
        }
        success {
            echo "✅ Pipeline completed successfully! Image pushed: ${DOCKER_IMAGE}"
        }
    }
}
